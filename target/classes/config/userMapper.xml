<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">
	<insert id="ins" parameterType="dto.UserDTO">
		insert into moons_user(user_code,user_type,user_id,user_pass,user_nickname,user_email)
		values(moons_user_code_seq.nextval,#{user_type},#{user_id},#{user_pass, jdbcType=VARCHAR},#{user_nickname},#{user_email})
	</insert>
	
	<delete id="del" parameterType="dto.UserDTO">
		delete from moons_user
		where user_code = #{user_code} and user_type = #{user_type}
	</delete>

	<select id="chkId" parameterType="dto.UserDTO" resultType="java.lang.Boolean">
		select case when count(*) > 0 then 1 else 0 end 
        from moons_user
		where user_id = #{user_id} and user_type = #{user_type}
	</select>
	
	<select id="code" parameterType="dto.UserDTO" resultType="int">
		select user_code
        from moons_user
		where user_id = #{user_id} and user_type = #{user_type}
	</select>
	
	<select id="chkIdPass" parameterType="dto.UserDTO" resultType="java.lang.Boolean">
		select case when count(*) > 0 then 1 else 0 end 
        from moons_user
		where user_id = #{user_id} and user_pass = #{user_pass} and user_type = #{user_type}
	</select>
	
	<select id="chkEmail" parameterType="dto.UserDTO" resultType="java.lang.Boolean">
		select case when count(*) > 0 then 1 else 0 end 
        from moons_user
		where user_id = #{user_id} and user_email = #{user_email} and user_type = #{user_type}
	</select>
	
	<select id="pass" parameterType="dto.UserDTO" resultType="String">
		select user_pass
        from moons_user
		where user_id = #{user_id} and user_email = #{user_email} and user_type = #{user_type}
	</select>
	
	<update id="uptInfo" parameterType="dto.UserDTO">   <!-- 수정하는 역할 -->
      update moons_user set user_nickname=#{user_nickname}, user_introduce=#{user_introduce} 
      where user_code=#{user_code}
    </update>
   
	<update id="uptPass" parameterType="dto.UserDTO">
   		update moons_user set user_pass=#{user_pass} where user_code=#{user_code}
	</update>

	<select id="selAllInfo" parameterType="int" resultType="dto.UserDTO">
		select *
		from moons_user
		where user_code=#{user_code}
	</select>
	
	<select id="selInfo" parameterType="int" resultType="dto.UserDTO">
		select user_code, user_id, user_nickname, user_photo, user_introduce, user_point,
			   (select count(*) 
				from moons_board 
				where user_code=#{user_code}) as postCount,
			   (select count(*)
				from moons_follow
				where user_code=#{user_code}) as followCount,
			   (select count(*)
				from moons_follow
				where follow_following=#{user_code}) as followerCount
		from moons_user
		where user_code=#{user_code}
	</select>
	
	<select id="selUptInfo" parameterType="int" resultType="dto.UserDTO">
		select user_id, user_type, user_nickname, user_email, user_photo, user_point, user_introduce, user_pass
		from moons_user
		where user_code=#{user_code}
	</select>

	<!-- 수정할때 수정한 num의 upload값 첨부파일을 찾아준다. -->
	<select id="selPhoto" parameterType="int" resultType="String">
		select user_photo 
		from moons_user 
		where user_code=#{user_code}
	</select>
	
	<select id="selNick" parameterType="int" resultType="String">
		select user_nickname 
		from moons_user 
		where user_code=#{user_code}
	</select>
	
	<select id="selFollow" parameterType="dto.UserDTO" resultType="dto.FollowDTO">
		select f.follow_following,
		u.user_photo, u.user_nickname, u.user_introduce
		from moons_follow f, moons_user u
		where f.user_code=#{user_code} and u.user_code=f.follow_following
	</select>
	
	<select id="followCount" parameterType="dto.UserDTO" resultType="int">
		select count(*)
		from moons_follow
		where user_code=#{user_code}
	</select>
	
	<select id="selFollower" parameterType="dto.UserDTO" resultType="dto.FollowDTO">
		select f.user_code as follow_following, f.checkFollow,
	   	u.user_photo, u.user_nickname, u.user_introduce
		from
		(
		select user_code, 1 as checkFollow
		from moons_follow
		where follow_following=#{user_code} and user_code in (select follow_following
											 		 		  from moons_follow
											 		 		  where user_code=#{user_code})
		union
		select user_code, 0 as checkFollow
		from moons_follow
		where follow_following=#{user_code} and user_code not in (select follow_following
														 		  from moons_follow
														 		  where user_code=#{user_code})
		) f, moons_user u
		where u.user_code=f.user_code
	</select>
	
	<select id="followerCount" parameterType="dto.UserDTO" resultType="int">
		select count(*)
		from moons_follow
		where follow_following=#{user_code}
	</select>
	
	<delete id="delFollow" parameterType="dto.FollowDTO">
		delete from moons_follow
		where user_code=#{user_code} and follow_following=#{follow_following}
	</delete>
	
	<insert id="insFollow" parameterType="dto.FollowDTO">
		insert into moons_follow(user_code, follow_following)
		values(#{user_code},#{follow_following})
	</insert>
	
	<update id="profile_photo" parameterType="dto.UserDTO" >
		update moons_user 
		set user_photo=#{user_photo}
		where user_code=#{user_code}
	</update>
	
	<select id="selMainTop" resultType="dto.BoardDTO">
		select location, l.board_num, board_photo, board_subject
		from moons_link l, moons_board b
		where l.board_num=b.board_num and l.link_type=1
	</select>
	
	<select id="selMainBottom" resultType="dto.BoardDTO">
		select location, l.board_num, board_photo, board_subject, board_content
		from moons_link l, moons_board b
		where l.board_num=b.board_num and l.link_type=2
	</select>
	
	<select id="searchUser" parameterType="map" resultType="dto.UserDTO">
		select b.*
		from (select rownum rm, a.*
			from (select u.user_code, u.user_id, u.user_nickname, u.user_photo, u.user_introduce,
																(select count(*)
																 from moons_follow f
																 where f.user_code=#{user_code} and f.follow_following=u.user_code) as follow_check
				from moons_user u
				where u.user_id LIKE '%'||#{search}||'%' or u.user_nickname LIKE '%'||#{search}||'%')a)b
		<![CDATA[where rm>#{startCount} and rm<=#{startCount}+#{listCount} ]]>
	</select>
</mapper>